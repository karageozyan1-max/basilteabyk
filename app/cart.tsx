// app/cart.tsx
'use client';

import React from 'react';
import { View, Text, ScrollView, TouchableOpacity, StyleSheet, SafeAreaView } from 'react-native';
import { Link, router } from 'expo-router';
import { useCart } from './CartContext';

const FREE_SHIP_THRESHOLD = 50;
const SHIPPING_FLAT = 6.99;
const TAX_RATE = 0.08;

export default function CartScreen() {
Â Â const { items, updateQty, removeItem, clearCart, subtotal } = useCart();

Â Â const shipping = subtotal >= FREE_SHIP_THRESHOLD || subtotal === 0 ? 0 : SHIPPING_FLAT;
Â Â const tax = subtotal * TAX_RATE;
Â Â const total = subtotal + shipping + tax;

Â Â const hasItems = items.length > 0;

Â Â return (
Â Â Â Â <SafeAreaView style={{ flex: 1, backgroundColor: '#fdf6ec' }}>
Â Â Â Â Â Â <ScrollView contentContainerStyle={{ padding: 20, paddingBottom: 64 }} showsVerticalScrollIndicator={false}>
Â Â Â Â Â Â Â Â <Text style={styles.title}>Your Cart</Text>

Â Â Â Â Â Â Â Â {!hasItems ? (
Â Â Â Â Â Â Â Â Â Â <>
Â Â Â Â Â Â Â Â Â Â Â Â <Text style={{ marginTop: 8 }}>Your cart is empty.</Text>
Â Â Â Â Â Â Â Â Â Â Â Â <Link href="/shop" asChild>
Â Â Â Â Â Â Â Â Â Â Â Â Â Â <TouchableOpacity style={[styles.btn, styles.btnPrimary, { marginTop: 16 }]}>
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â <Text style={styles.btnPrimaryText}>Go to Shop</Text>
Â Â Â Â Â Â Â Â Â Â Â Â Â Â </TouchableOpacity>
Â Â Â Â Â Â Â Â Â Â Â Â </Link>
Â Â Â Â Â Â Â Â Â Â </>
Â Â Â Â Â Â Â Â ) : (
Â Â Â Â Â Â Â Â Â Â <>
Â Â Â Â Â Â Â Â Â Â Â Â {/* Items */}
Â Â Â Â Â Â Â Â Â Â Â Â {items.map((it) => (
Â Â Â Â Â Â Â Â Â Â Â Â Â Â <View key={it.id} style={styles.itemRow}>
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â <View style={{ flex: 1, minWidth: 0 }}>
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â <Text style={styles.itemName} numberOfLines={1}>
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Basil Tea â€” {it.sizeKey}
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â </Text>
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â <Text style={styles.itemMeta}>{it.pack}-pack â€¢ ${it.unitPrice.toFixed(2)} per bottle</Text>
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â </View>

Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â {/* qty controls */}
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â <View style={styles.qtyWrap}>
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â <TouchableOpacity
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â style={styles.qtyBtn}
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â onPress={() => updateQty(it.id, Math.max(1, it.qty - 1))}
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â accessibilityLabel="Decrease quantity"
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â >
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â <Text style={styles.qtyBtnText}>âˆ’</Text>
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â </TouchableOpacity>

Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â <Text style={styles.qtyValue}>{it.qty}</Text>

Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â <TouchableOpacity
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â style={styles.qtyBtn}
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â onPress={() => updateQty(it.id, Math.min(99, it.qty + 1))}
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â accessibilityLabel="Increase quantity"
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â >
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â <Text style={styles.qtyBtnText}>+</Text>
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â </TouchableOpacity>
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â </View>

Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â <View style={{ alignItems: 'flex-end', marginLeft: 10 }}>
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â <Text style={styles.lineTotal}>${(it.unitPrice * it.qty).toFixed(2)}</Text>
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â <TouchableOpacity onPress={() => removeItem(it.id)}>
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â <Text style={styles.remove}>Remove</Text>
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â </TouchableOpacity>
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â </View>
Â Â Â Â Â Â Â Â Â Â Â Â Â Â </View>
Â Â Â Â Â Â Â Â Â Â Â Â ))}

Â Â Â Â Â Â Â Â Â Â Â Â {/* Totals */}
Â Â Â Â Â Â Â Â Â Â Â Â <View style={{ height: 10 }} />
Â Â Â Â Â Â Â Â Â Â Â Â <Row label="Subtotal" value={`$${subtotal.toFixed(2)}`} />
Â Â Â Â Â Â Â Â Â Â Â Â <Row label="Shipping" value={shipping === 0 ? 'FREE' : `$${shipping.toFixed(2)}`} />
Â Â Â Â Â Â Â Â Â Â Â Â <Row label={`Tax (${Math.round(TAX_RATE * 100)}%)`} value={`$${tax.toFixed(2)}`} />
Â Â Â Â Â Â Â Â Â Â Â Â <Row label="Total" value={`$${total.toFixed(2)}`} bold />

Â Â Â Â Â Â Â Â Â Â Â Â {/* Free shipping nudge */}
Â Â Â Â Â Â Â Â Â Â Â Â {subtotal < FREE_SHIP_THRESHOLD && subtotal > 0 && (
Â Â Â Â Â Â Â Â Â Â Â Â Â Â <Text style={styles.freeMsg}>
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Add ${(FREE_SHIP_THRESHOLD - subtotal).toFixed(2)} more to get FREE shipping ðŸŽ‰
Â Â Â Â Â Â Â Â Â Â Â Â Â Â </Text>
Â Â Â Â Â Â Â Â Â Â Â Â )}
Â Â Â Â Â Â Â Â Â Â Â Â {subtotal >= FREE_SHIP_THRESHOLD && subtotal > 0 && (
Â Â Â Â Â Â Â Â Â Â Â Â Â Â <Text style={[styles.freeMsg, { color: '#0b3d2e' }]}>
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â You unlocked FREE shipping! You saved ${SHIPPING_FLAT.toFixed(2)} ðŸŽ‰
Â Â Â Â Â Â Â Â Â Â Â Â Â Â </Text>
Â Â Â Â Â Â Â Â Â Â Â Â )}

Â Â Â Â Â Â Â Â Â Â Â Â {/* Actions */}
Â Â Â Â Â Â Â Â Â Â Â <TouchableOpacity
  style={[styles.btn, styles.btnPrimary]}
  onPress={() => router.push("/checkout")}
>
  <Text style={styles.btnPrimaryText}>Checkout</Text>
</TouchableOpacity>

Â Â Â Â Â Â Â Â Â Â Â Â <TouchableOpacity style={[styles.btn, styles.btnGhost]} onPress={clearCart}>
Â Â Â Â Â Â Â Â Â Â Â Â Â Â <Text style={styles.btnGhostText}>Clear Cart</Text>
Â Â Â Â Â Â Â Â Â Â Â Â </TouchableOpacity>

Â Â Â Â Â Â Â Â Â Â Â Â <Link href="/shop" asChild>
Â Â Â Â Â Â Â Â Â Â Â Â Â Â <TouchableOpacity style={[styles.btn, styles.btnGhost]}>
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â <Text style={styles.btnGhostText}>Continue Shopping</Text>
Â Â Â Â Â Â Â Â Â Â Â Â Â Â </TouchableOpacity>
Â Â Â Â Â Â Â Â Â Â Â Â </Link>
Â Â Â Â Â Â Â Â Â Â </>
Â Â Â Â Â Â Â Â )}
Â Â Â Â Â Â </ScrollView>
Â Â Â Â </SafeAreaView>
Â Â );
}

function Row({ label, value, bold }: { label: string; value: string; bold?: boolean }) {
Â Â return (
Â Â Â Â <View style={styles.row}>
Â Â Â Â Â Â <Text style={[styles.rowLabel, bold && styles.rowBold]}>{label}</Text>
Â Â Â Â Â Â <Text style={[styles.rowValue, bold && styles.rowBold]}>{value}</Text>
Â Â Â Â </View>
Â Â );
}

const styles = StyleSheet.create({
Â Â title: { fontSize: 22, fontWeight: '800' },

Â Â itemRow: {
Â Â Â Â marginTop: 12,
Â Â Â Â padding: 12,
Â Â Â Â borderRadius: 12,
Â Â Â Â borderWidth: 1,
Â Â Â Â borderColor: '#e5e7eb',
Â Â Â Â backgroundColor: 'white',
Â Â Â Â flexDirection: 'row',
Â Â Â Â alignItems: 'center',
Â Â Â Â gap: 12,
Â Â },
Â Â itemName: { fontSize: 16, fontWeight: '700' },
Â Â itemMeta: { fontSize: 13, color: '#555' },

Â Â qtyWrap: { flexDirection: 'row', alignItems: 'center', gap: 8, marginLeft: 8 },
Â Â qtyBtn: {
Â Â Â Â width: 32, height: 32, borderRadius: 8,
Â Â Â Â borderWidth: 1, borderColor: '#1f5134',
Â Â Â Â alignItems: 'center', justifyContent: 'center',
Â Â },
Â Â qtyBtnText: { fontSize: 18, fontWeight: '800', color: '#1f5134' },
Â Â qtyValue: { width: 28, textAlign: 'center', fontSize: 16, fontWeight: '700' },

Â Â lineTotal: { fontSize: 16, fontWeight: '800' },
Â Â remove: { textDecorationLine: 'underline', marginTop: 2 },

Â Â row: { flexDirection: 'row', justifyContent: 'space-between', marginTop: 8 },
Â Â rowLabel: { fontSize: 16 },
Â Â rowValue: { fontSize: 16 },
Â Â rowBold: { fontWeight: '800' },

Â Â freeMsg: { marginTop: 10, color: '#b38c2c', fontWeight: '700' },

Â Â btn: { padding: 12, borderRadius: 10, marginTop: 10, alignItems: 'center', justifyContent: 'center' },
Â Â btnPrimary: { backgroundColor: '#1f5134' },
Â Â btnPrimaryText: { color: 'white', fontWeight: '800' },
Â Â btnGhost: { borderColor: '#1f5134', borderWidth: 1, backgroundColor: 'transparent' },
Â Â btnGhostText: { color: '#1f5134', fontWeight: '700' },
});
