// app/cart.tsx
'use client';

import React from 'react';
import { View, Text, Image, StyleSheet, ScrollView, TouchableOpacity, Dimensions } from 'react-native';
import { SafeAreaView } from 'react-native-safe-area-context';
import { useRouter } from 'expo-router';
import { useCart } from './CartContext';

const BG_CREAM = '#fdf6ec';
const GREEN = '#0b3d2e';
const GOLD = '#c7a45a';
const BORDER = '#eadccf';

const { width } = Dimensions.get('window');
const isSmall = width < 380;
const BTN_H = isSmall ? 42 : 48;
const FOOTER_PAD = 70; // space so sticky footer never covers totals

export default function CartPage() {
Â Â const router = useRouter();
Â Â const { items, updateQty, removeItem, clearCart, subtotal } = useCart();

Â Â const FREE_SHIP_THRESHOLD = 50;
Â Â const SHIPPING_FLAT = 6.99;
Â Â const TAX_RATE = 0.08;

Â Â const shipping = subtotal === 0 || subtotal >= FREE_SHIP_THRESHOLD ? 0 : SHIPPING_FLAT;
Â Â const tax = subtotal * TAX_RATE;
Â Â const total = subtotal + shipping + tax;

Â Â const hasItem = items.length > 0;

Â Â return (
Â Â Â Â <SafeAreaView style={{ flex: 1, backgroundColor: BG_CREAM }}>
Â Â Â Â Â Â <ScrollView
Â Â Â Â Â Â Â Â contentContainerStyle={{ padding: 20, paddingBottom: FOOTER_PAD }}
Â Â Â Â Â Â Â Â showsVerticalScrollIndicator={false}
Â Â Â Â Â Â >
Â Â Â Â Â Â Â Â <View style={styles.card}>
Â Â Â Â Â Â Â Â Â Â <Text style={styles.title}>Your Cart</Text>

Â Â Â Â Â Â Â Â Â Â {!hasItem ? (
Â Â Â Â Â Â Â Â Â Â Â Â <>
Â Â Â Â Â Â Â Â Â Â Â Â Â Â <Text style={{ color: GOLD, marginTop: 8 }}>Your cart is empty.</Text>
Â Â Â Â Â Â Â Â Â Â Â Â Â Â <TouchableOpacity style={styles.primaryBtn} onPress={() => router.push('/shop')}>
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â <Text style={styles.primaryBtnText}>Go to Shop</Text>
Â Â Â Â Â Â Â Â Â Â Â Â Â Â </TouchableOpacity>
Â Â Â Â Â Â Â Â Â Â Â Â </>
Â Â Â Â Â Â Â Â Â Â ) : (
Â Â Â Â Â Â Â Â Â Â Â Â <>
Â Â Â Â Â Â Â Â Â Â Â Â Â Â {/* Items */}
Â Â Â Â Â Â Â Â Â Â Â Â Â Â {items.map((i) => (
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â <View key={i.id} style={styles.itemRow}>
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â <Image
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â source={require('../assets/images/basil-bottle.png')}
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â style={{ width: 56, height: 56, borderRadius: 8, marginRight: 10 }}
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â resizeMode="cover"
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â {/* IMPORTANT: minWidth:0 and flexShrink prevent vertical letters */}
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â <View style={styles.itemCol}>
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â <Text style={styles.itemName} numberOfLines={2}>
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Basil Tea â€” {i.size}
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â </Text>
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â <Text style={styles.itemMeta} numberOfLines={2}>
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â {i.pack}-pack â€¢ ${i.unitPrice.toFixed(2)} per bottle
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â </Text>

Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â <View style={styles.qtyRow}>
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â <QtyBtn onPress={() => updateQty(i.id, i.qty - 1)} label="â€“" />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â <Text style={styles.qtyText}>{i.qty}</Text>
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â <QtyBtn onPress={() => updateQty(i.id, i.qty + 1)} label="+" />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â <TouchableOpacity onPress={() => removeItem(i.id)} style={{ marginLeft: 8 }}>
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â <Text style={{ color: '#a33', fontWeight: '700' }}>Remove</Text>
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â </TouchableOpacity>
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â </View>
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â </View>

Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â <Text style={styles.itemPrice}>
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â ${(i.unitPrice * i.pack * i.qty).toFixed(2)}
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â </Text>
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â </View>
Â Â Â Â Â Â Â Â Â Â Â Â Â Â ))}

Â Â Â Â Â Â Â Â Â Â Â Â Â Â {/* Totals */}
Â Â Â Â Â Â Â Â Â Â Â Â Â Â <View style={{ height: 10 }} />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â <Row label="Subtotal" value={`$${subtotal.toFixed(2)}`} />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â <Row label="Shipping" value={shipping === 0 ? 'FREE' : `$${shipping.toFixed(2)}`} />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â <Row label={`Tax (8%)`} value={`$${tax.toFixed(2)}`} />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â <View style={{ height: 6 }} />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â <Row label="Total" value={`$${total.toFixed(2)}`} bold />

Â Â Â Â Â Â Â Â Â Â Â Â Â Â {/* Free shipping hint */}
Â Â Â Â Â Â Â Â Â Â Â Â Â Â {subtotal < FREE_SHIP_THRESHOLD && subtotal > 0 && (
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â <Text style={{ color: GOLD, marginTop: 6, fontWeight: '700' }}>
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Add ${(FREE_SHIP_THRESHOLD - subtotal).toFixed(2)} more to get FREE shipping ðŸŽ‰
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â </Text>
Â Â Â Â Â Â Â Â Â Â Â Â Â Â )}

Â Â Â Â Â Â Â Â Â Â Â Â Â Â {/* Actions */}
Â Â Â Â Â Â Â Â Â Â Â Â Â Â <TouchableOpacity
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â style={[styles.primaryBtn, { marginTop: 12 }]}
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â onPress={() => router.push('/checkout')}
Â Â Â Â Â Â Â Â Â Â Â Â Â Â >
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â <Text style={styles.primaryBtnText}>Checkout</Text>
Â Â Â Â Â Â Â Â Â Â Â Â Â Â </TouchableOpacity>

Â Â Â Â Â Â Â Â Â Â Â Â Â Â <TouchableOpacity style={styles.secondaryBtn} onPress={() => router.push('/shop')}>
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â <Text style={styles.secondaryBtnText}>Continue Shopping</Text>
Â Â Â Â Â Â Â Â Â Â Â Â Â Â </TouchableOpacity>

Â Â Â Â Â Â Â Â Â Â Â Â Â Â <TouchableOpacity style={styles.secondaryBtn} onPress={() => clearCart()}>
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â <Text style={styles.secondaryBtnText}>Clear Cart</Text>
Â Â Â Â Â Â Â Â Â Â Â Â Â Â </TouchableOpacity>
Â Â Â Â Â Â Â Â Â Â Â Â </>
Â Â Â Â Â Â Â Â Â Â )}
Â Â Â Â Â Â Â Â </View>
Â Â Â Â Â Â </ScrollView>
Â Â Â Â </SafeAreaView>
Â Â );
}

function Row({ label, value, bold }: { label: string; value: string; bold?: boolean }) {
Â Â return (
Â Â Â Â <View style={styles.row}>
Â Â Â Â Â Â <Text style={[styles.rowLabel, bold && styles.rowBold]}>{label}</Text>
Â Â Â Â Â Â <Text style={[styles.rowValue, bold && styles.rowBold]}>{value}</Text>
Â Â Â Â </View>
Â Â );
}

function QtyBtn({ label, onPress }: { label: string; onPress: () => void }) {
Â Â return (
Â Â Â Â <TouchableOpacity onPress={onPress} style={styles.qtyBtn}>
Â Â Â Â Â Â <Text style={styles.qtyBtnText}>{label}</Text>
Â Â Â Â </TouchableOpacity>
Â Â );
}

const styles = StyleSheet.create({
Â Â card: {
Â Â Â Â backgroundColor: BG_CREAM,
Â Â Â Â borderRadius: 14,
Â Â Â Â padding: 18,
Â Â Â Â borderWidth: 1,
Â Â Â Â borderColor: BORDER,
Â Â Â Â maxWidth: 1000,
Â Â Â Â alignSelf: 'center',
Â Â Â Â width: '100%',
Â Â },

Â Â title: {
Â Â Â Â fontSize: isSmall ? 18 : 22,
Â Â Â Â fontWeight: '800',
Â Â Â Â color: '#fff',
Â Â Â Â backgroundColor: GREEN,
Â Â Â Â paddingHorizontal: 10,
Â Â Â Â paddingVertical: 4,
Â Â Â Â borderRadius: 6,
Â Â Â Â alignSelf: 'flex-start',
Â Â },

Â Â itemRow: {
Â Â Â Â flexDirection: 'row',
Â Â Â Â alignItems: 'center',
Â Â Â Â paddingVertical: 10,
Â Â Â Â borderBottomWidth: 1,
Â Â Â Â borderBottomColor: BORDER,
Â Â Â Â gap: 6,
Â Â },

Â Â // Middle column â€” the key to avoid vertical letters on mobile
Â Â itemCol: {
Â Â Â Â flex: 1,
Â Â Â Â minWidth: 0,Â Â Â Â Â Â Â Â Â // allow measuring available width correctly
Â Â Â Â alignSelf: 'stretch',
Â Â },

Â Â itemName: { fontSize: 16, fontWeight: '700', color: GREEN, flexShrink: 1 },
Â Â itemMeta: { fontSize: 13, color: GOLD, marginTop: 2, flexShrink: 1 },

Â Â itemPrice: {
Â Â Â Â fontSize: 16,
Â Â Â Â fontWeight: '700',
Â Â Â Â color: GREEN,
Â Â Â Â marginLeft: 6,
Â Â Â Â textAlign: 'right',
Â Â },

Â Â qtyRow: { flexDirection: 'row', alignItems: 'center', marginTop: 6 },
Â Â qtyBtn: {
Â Â Â Â height: 36,
Â Â Â Â width: 36,
Â Â Â Â borderRadius: 8,
Â Â Â Â backgroundColor: GREEN,
Â Â Â Â alignItems: 'center',
Â Â Â Â justifyContent: 'center',
Â Â },
Â Â qtyBtnText: { color: BG_CREAM, fontSize: 18, fontWeight: '800' },
Â Â qtyText: { width: 30, textAlign: 'center', fontSize: 16, fontWeight: '800', color: GREEN },

Â Â row: { flexDirection: 'row', justifyContent: 'space-between', alignItems: 'center', marginVertical: 4 },
Â Â rowLabel: { fontSize: 14, color: '#333' },
Â Â rowValue: { fontSize: 14, color: '#333' },
Â Â rowBold: { fontWeight: '800', color: GREEN },

Â Â primaryBtn: {
Â Â Â Â height: BTN_H,
Â Â Â Â borderRadius: 10,
Â Â Â Â backgroundColor: GREEN,
Â Â Â Â alignItems: 'center',
Â Â Â Â justifyContent: 'center',
Â Â },
Â Â primaryBtnText: { color: BG_CREAM, fontWeight: '700' },

Â Â secondaryBtn: {
Â Â Â Â marginTop: 10,
Â Â Â Â height: BTN_H,
Â Â Â Â borderRadius: 10,
Â Â Â Â borderWidth: 1,
Â Â Â Â borderColor: GREEN,
Â Â Â Â backgroundColor: BG_CREAM,
Â Â Â Â alignItems: 'center',
Â Â Â Â justifyContent: 'center',
Â Â },
Â Â secondaryBtnText: { fontWeight: '700', color: GREEN },
});
